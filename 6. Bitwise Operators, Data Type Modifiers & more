Bitwise Operators, Data Type Modifiers & more
----------------------------------------------

Introduction
-------------

Bitwise Operators
------------------

Bitwise AND &
Bitwise OR |
Bitwise XOR ^


#include <iostream>
#include <stdlib.h>
using namespace std;


int main() {
    int a = 4, b = 8;

    cout<<(a & b)<<endl;

    return 0;
}

output
0


#include <iostream>
#include <stdlib.h>
using namespace std;


int main() {
    int a = 4, b = 8;

    cout<<(a | b)<<endl;

    return 0;
}

output
12


#include <iostream>
#include <stdlib.h>
using namespace std;


int main() {
    int a = 4, b = 8;

    cout<<(a ^ b)<<endl;

    return 0;
}

output
12



Bitwise Left Shift Operator <<

Bitwise Right Shift Operator >>


#include <iostream>
#include <stdlib.h>
using namespace std;


int main() {

    cout<<(4 << 1)<<endl;

    return 0;
}

output
8


#include <iostream>
#include <stdlib.h>
using namespace std;


int main() {

    cout<<(10 >> 1)<<endl;

    return 0;
}

output
5


Operator Precedence
--------------------


#include <iostream>
#include <stdlib.h>
using namespace std;


int main() {

    cout<<(5-2*6)<<endl;

    return 0;
}

output
-7


#include <iostream>
#include <stdlib.h>
using namespace std;


int main() {

    cout<<((5-2)*6)<<endl;

    return 0;
}

output
18



#include <iostream>
#include <stdlib.h>
using namespace std;


int main() {

    cout<<(4*5%2)<<endl;

    return 0;
}

output
0


Scope (Local vs Global)
-------------------------


#include <iostream>
#include <stdlib.h>
using namespace std;


int main() {

    if(3 > 1){
        int x = 10;
    }else{
        int x = 10;
    }

    cout<<x<<endl; // This will cause an error because x is not defined in this scope

    return 0;
}

output
error



#include <iostream>
#include <stdlib.h>
using namespace std;


int main() {

    for(int i=0;i<10;i++){ //local scope
		//int x = 0;
    }

    cout<<i<<endl; // This line is incorrect as 'i' is not defined outside the loop.
    return 0;
}


output
error



#include <iostream>
#include <stdlib.h>
using namespace std;


int main() {

    for(int i=0;i<10;i++){
        for(int j=0;j<10;j++){

        }
        for(int j=0;j<10;j++){

        }
    }

    return 0;
}


output
empty


#include <iostream>
#include <stdlib.h>
using namespace std;


int main() {

    {
        int x = 10;
    }

    cout << x << endl; // This will cause an error because x is out of scope

    {
        int y = 20;
        cout << y << endl; // This will work fine
    }
    return 0;
}

output
error


#include <iostream>
#include <stdlib.h>
using namespace std;


void fun(){
    int x = 10;
}

int main() {

    fun();
    cout << x << endl; // This will cause an error because x is not in scope here
    return 0;
}

output
error



#include <iostream>
#include <stdlib.h>
using namespace std;

int x = 10;

int main() {

    cout << x << endl; 
    return 0;
}

output
10



#include <iostream>
#include <stdlib.h>
using namespace std;

int x = 10;

int fun(){
    cout << x << endl; 
}

int main() {
    fun();
    cout << x << endl; 
    return 0;
}

output
10
10



Data Type Modifiers
--------------------

long

short

long long

signed

unsigned



#include <iostream>
#include <stdlib.h>
using namespace std;


int main() {
    cout<<"int = "<<sizeof(int)<<endl; // Output the size of int type
    cout<<"long int = "<<sizeof(long int)<<endl; // Output the size of long int type
    cout<<"long long int = "<<sizeof(long long int)<<endl; // Output the size of long long int type
    cout<<"short int = "<<sizeof(short int)<<endl; // Output the size of short int type
    cout<<"float = "<<sizeof(float)<<endl; // Output the size of float type
    cout<<"double = "<<sizeof(double)<<endl; // Output the size of double type
    cout<<"long double = "<<sizeof(long double)<<endl; // Output the size of long double type
    cout<<"char = "<<sizeof(char)<<endl; // Output the size of char type
    cout<<"bool = "<<sizeof(bool)<<endl; // Output the size of bool type

    return 0;
}

output
int = 4
long int = 4
long long int = 8
short int = 2
float = 4
double = 8
long double = 12
char = 1
bool = 1



#include <iostream>
#include <stdlib.h>
using namespace std;


int main() {
    signed int a = 10;
    signed int b = -10;
    unsigned int c = 20;
    unsigned int d = -20;
    cout << "signed int = " << sizeof(a) << endl;
    cout << "unsigned int = " << sizeof(c) << endl;
    cout << "signed int = " << a << endl;
    cout << "signed int = " << b << endl;
    cout << "unsigned int = " << c << endl;
    cout << "unsigned int = " << d << endl;
    return 0;
}

output
signed int = 4
unsigned int = 4
signed int = 10
signed int = -10
unsigned int = 20
unsigned int = 4294967276


Summary & Homework
------------------

Figure out how to find if a number is power of 2 without any loop.

#include <iostream>
#include <stdlib.h>
using namespace std;

bool isPowerOfTwo(int n) {
    if(n <= 0) return false;
    while(n > 1) {
        if(n % 2 != 0) return false;
        n /= 2;
    }
    return true;
}

int main() {
    int n = 32;
    cout << "Is " << n << " a power of two? " << (isPowerOfTwo(n) ? "Yes" : "No") << endl;
    return 0;
}


output
Is 32 a power of two? Yes





#include <iostream>
#include <stdlib.h>
using namespace std;

bool isPowerOfTwo(int n) {
    if (n <= 0) return false;
    return (n & (n - 1)) == 0;
}

int main() {
    int n = 32;
    cout << "Is " << n << " a power of two? " << (isPowerOfTwo(n) ? "Yes" : "No") << endl;
    return 0;
}


output
Is 32 a power of two? Yes




#include <iostream>
#include <stdlib.h>
using namespace std;

bool isPowerOfTwo(int n) {
    if(n <= 0) return false;
    int count = 0;
    while(n > 0) {
        if(n & 1) count++;
        n = n >> 1;
    }
    return (count == 1);
}

int main() {
    int n = 32;
    cout << "Is " << n << " a power of two? " << (isPowerOfTwo(n) ? "Yes" : "No") << endl;
    return 0;
}



output
Is 32 a power of two? Yes





WAF to reverse an Integer n.


#include <iostream>
#include <stdlib.h>
using namespace std;

int reverseNum(int n) {
    int revNum = 0;
    while(n > 0){
        int digit = n % 10;
        revNum = revNum * 10 + digit;
        n = n / 10;
    }
    return revNum;
}

int main() {
    int n = 12345;
    cout<<"Reverse number: "<<reverseNum(n)<<endl;
    return 0;
}


output
Reverse number: 54321


-----------------------------------------------------------------------------------------------------------------------------------------------